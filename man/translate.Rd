% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/translate.R
\name{translate}
\alias{translate}
\alias{tx}
\alias{translate-along-x-axis}
\alias{\%tx\%}
\alias{translate-along-x-axis-infix}
\alias{th}
\alias{translate-horizontal}
\alias{\%th\%}
\alias{translate-horizontal-infix}
\alias{ty}
\alias{translate-along-y-axis}
\alias{\%ty\%}
\alias{translate-along-y-axis-infix}
\alias{tv}
\alias{translate-vertical}
\alias{\%tv\%}
\alias{translate-vertical-infix}
\alias{tu}
\alias{translate-up}
\alias{\%tu\%}
\alias{translate-up-infix}
\alias{tr}
\alias{translate-right}
\alias{\%tr\%}
\alias{translate-right-infix}
\alias{tl}
\alias{translate-left}
\alias{\%tl\%}
\alias{translate-left-infix}
\alias{td}
\alias{translate-down}
\alias{\%td\%}
\alias{translate-down-infix}
\alias{txy}
\alias{translate-along-xy-axis}
\alias{\%txy\%}
\alias{translate-along-xy-axis-infix}
\alias{tal}
\alias{translate-by-angle-and-length}
\alias{\%tal\%}
\alias{translate-by-angle-and-length-infix}
\alias{translateexample}
\title{Translate}
\usage{
tx(sf, step)

sf \%tx\% step

th(sf, step)

sf \%th\% step

ty(sf, step)

sf \%ty\% step

tv(sf, step)

sf \%tv\% step

tu(sf, step)

sf \%tu\% step

tr(sf, step)

sf \%tr\% step

tl(sf, step)

sf \%tl\% step

td(sf, step)

sf \%td\% step

txy(sf, step)

sf \%txy\% step

tal(sf, step)

sf \%tal\% step

translateexample()
}
\arguments{
\item{sf}{an sf object}

\item{step}{numeric. In tx(), %tx%, ty() and %ty%, step must be one number.
In txy() and %txy%, step must be two numbers. The first is x and the other
is y. In tal() and %tal%, step must be two numbers too, the first is angel,
ranging from -180 to 180, the other is the length that you want to translate.}
}
\description{
Translate
}
\examples{
library(sf666)
library(ggplot2)
#generate a triangle
tri=triangle()

#base map
ggplot()+
    geom_sf(data = tri,fill='red')

# translate along x-axis
ggplot()+
    geom_sf(data = tri,fill='red')+
    geom_sf(data = tx(tri,2))

ggplot()+
    geom_sf(data = tri,fill='red')+
    geom_sf(data = tri \%tx\% 2)


# translate along y-axis
ggplot()+
    geom_sf(data = tri,fill='red')+
    geom_sf(data = ty(tri,2))

ggplot()+
    geom_sf(data = tri,fill='red')+
    geom_sf(data = tri \%ty\% 2)

# translate along x-axis and y-axis
ggplot()+
    geom_sf(data = tri,fill='red')+
    geom_sf(data = txy(tri,c(1,2)))

ggplot()+
    geom_sf(data = tri,fill='red')+
    geom_sf(data = tri \%txy\% c(1,2))



# translate by angle and length
ggplot()+
    geom_sf(data = tri,fill='red')+
    geom_sf(data = tal(tri,c(45,2)))

ggplot()+
    geom_sf(data = tri,fill='red')+
    geom_sf(data = tri \%tal\% c(60,2))
\donttest{
# more complicated examples
library(sf)
library(ggnewscale)
nc <- st_read(system.file("shape/nc.shp", package="sf"))

# origin map
ggplot()+
    geom_sf(data = nc)
# translate 10, along x
ggplot()+
    geom_sf(data = nc)+
    geom_sf(data = txy(nc,c(10,0)))


# translate 4, along y
ggplot()+
    geom_sf(data = nc)+
    geom_sf(data = txy(nc,c(0,4)))


# translate 10 along x and 4, along y
ggplot()+
    geom_sf(data = nc)+
    geom_sf(data = txy(nc,c(10,4)))

# combine them
ggplot()+
    geom_sf(data = nc)+
    geom_sf(data = txy(nc,c(10,0)))+
    geom_sf(data = txy(nc,c(0,4)))+
    geom_sf(data = txy(nc,c(10,4)))

# translate nc 5 towards angle of 30 degrees

ggplot()+
    geom_sf(data = nc)+
    geom_sf(data = tal(nc,c(30,5)))

# by ggnewscale, you can add diffrent scales
ggplot()+
    #origion
    geom_sf(data = nc,aes(fill=AREA))+
    #right
    new_scale_fill()+
    geom_sf(data = txy(nc,c(10,0)),aes(fill=PERIMETER))+
    scale_fill_gradientn(colors=c('black','red'))+
    #down
    new_scale_fill()+
    geom_sf(data = ty(nc,-4),aes(fill=CRESS_ID))+
    scale_fill_gradientn(colors=c('black','green'))+
    #right and down
    new_scale_fill()+
    geom_sf(data = txy(nc,c(10,-4)),aes(fill=SID74))+
    scale_fill_gradientn(colors=c('black','yellow'))+

    theme_void()
}
}
